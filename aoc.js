
function parse(path) {
    const moves = path.split(',');
    const points = new Map;
    let x = 0, y = 0;
    let steps = 0;
    moves.forEach(move => {
        const dir = move[0], amount = parseInt(move.slice(1));
        for (let i = 0; i < amount; i++) {
            steps++;
            switch (dir) {
                case 'R':
                    x++;
                    break;
                case 'L':
                    x--;
                    break;
                case 'U':
                    y++;
                    break;
                case 'D':
                    y--;
            }
            const key = `${x}:${y}`;
            if (!points.has(key)) {
                points.set(key, steps);
            }
        }
    });
    return points;
}

const {Duplex} = require('stream');

class IntcodeComputer extends Duplex {

    constructor(intcode, initialInput, id) {
        super ({
            decodeStrings: false,
            objectMode: true
        });
        this.intcode = intcode;
        this.pointer = 0;
        this.relativeBase = 0;
        this.input = initialInput || [];
        this.id = id;
        this.paused = true;
        this.output = [];
    }

    _write(chunk, encoding, callback) {
        this.input.push(chunk);
        if (this.paused) {
            this.run();
        }
        callback();
    }

    _read() {
        this.run();
    }

    run() {
        this.paused = false;
        // console.log(this.id, 'Running');
        while (this.intcode[this.pointer] !== 99) {
            const opcode = this.intcode[this.pointer] % 100,
            paramModes = Math.floor(this.intcode[this.pointer] / 100).toString().split('').map(p => parseInt(p)).reverse();
            // console.log(this.intcode.join(''));
            // console.log(this.pointer, opcode, paramModes, this.intcode.slice(this.pointer, this.pointer + 4).join(','));
            const getLocation = paramPosition => {
                const paramValue = this.intcode[this.pointer + paramPosition + 1];
                switch(paramModes[paramPosition]) {
                    case 0:
                    case undefined:
                        return paramValue;
                    case 1:
                        return this.pointer + paramPosition + 1;
                    case 2:
                        return this.relativeBase + paramValue;
                    default:
                        throw new Error(`Invalid param mode ${paramModes[position]}`);
                }
            }
            const getParamValue = paramPosition => this.intcode[getLocation(paramPosition)] || 0;

            if (opcode === 1) { // Add
                this.intcode[getLocation(2)] = getParamValue(0) + getParamValue(1);
                this.pointer += 4;
            } else if (opcode === 2) { // Multiply
                this.intcode[getLocation(2)] = getParamValue(0) * getParamValue(1);
                this.pointer += 4;
            } else if (opcode === 3) { // Input
                // If there's no input, pause the machine until we get some
                if (this.input.length === 0) {
                    this.paused = true;
                    // Let the caller know we're waiting for input
                    this.push('');
                    break;
                }
                // console.log(this.id, 'Input', this.input[0]);
                this.intcode[getLocation(0)] = this.input.shift();
                this.pointer += 2;
            } else if (opcode === 4) { // Output
                // console.log(this.id, 'Output', getParamValue(0));
                this.push(getParamValue(0));
                this.pointer += 2;
            } else if (opcode === 5) { // Jump-if-true
                if (getParamValue(0) !== 0) {
                    this.pointer = getParamValue(1);
                } else {
                    this.pointer += 3;
                }
            } else if (opcode === 6) { // Jump-if-false
                if (getParamValue(0) === 0) {
                    this.pointer = getParamValue(1);
                } else {
                    this.pointer += 3;
                }
            } else if (opcode === 7) { // Less than
                this.intcode[getLocation(2)] = getParamValue(0) < getParamValue(1) ? 1 : 0;
                this.pointer += 4;
            } else if (opcode === 8) { // Equals
                this.intcode[getLocation(2)] = getParamValue(0) === getParamValue(1) ? 1 : 0;
                this.pointer += 4;
            } else if (opcode === 9) {
                this.relativeBase += getParamValue(0);
                this.pointer += 2;
            } else {
                throw new Error(`Invalid code ${this.intcode[this.pointer]} at ${this.pointer}`);
            }
        }
        if (this.intcode[this.pointer] === 99) {
            // console.log(this.id, 'Finished');
            this.push(null);
        }
    }
}

function compute(intcode, input) {
    return new Promise((resolve, reject) => {
        const computer = new IntcodeComputer(intcode, input);
        const output = [];
        computer.on('end', () => resolve(output));
        computer.on('error', reject);
        computer.on('data', data => output.push(data));
    });
}



function validateNumber(num) {
    const array = num.toString().split('');
    let currentStreak = 0, streaksOf2 = 0;
    for (let i = 1; i < array.length; i++) {
        if (array[i] < array[i - 1]) {
            return false;
        }
        if (array[i] === array[i - 1]) {
            currentStreak++;
        } else {
            if (currentStreak === 1) {
                streaksOf2++;
            }
            currentStreak = 0;
        }
    }
    return streaksOf2 > 0 || currentStreak === 1;
}

/*
const path1 = 'R990,U408,L583,U275,R483,U684,R437,U828,R108,U709,R378,U97,R252,D248,R413,U750,R428,D545,R570,D795,L204,D975,L557,U160,L861,U106,R436,U934,R81,D237,R660,U704,L451,U135,R282,D391,R39,D109,R125,U918,R214,U481,R853,U825,L91,D763,R335,U868,R42,U218,R152,D429,R414,D607,R28,U436,R7,U770,L215,D373,R209,U440,L536,U120,R900,D46,R635,D75,R58,U267,L581,U474,L858,U172,R725,U54,R291,D274,L583,D743,L130,U563,R137,U524,R659,D997,R131,D364,R883,D222,R628,U579,R801,D890,L519,D749,L620,U60,L759,D759,R376,U769,L910,D570,L814,U954,L153,D42,L784,D66,L844,U29,L794,D342,L924,U825,R447,U828,R404,D52,L330,D876,R125,U203,R245,U936,R866,D804,L186,U693,L620,D722,L32,D735,L191,D217,R68,U209,L736,U365,R280,U608,L450,D240,L282,U434,R589,U94,R470,D5,R49,U407,R552,D651,L69,U518,L358,D130,L710,D929,L315,U345,L511,D229,L557,U44,L890,D702,L181,D61,L208,U553,R878,U354,R787,U624,L961,D92,L891,U70,R203,U255,R532,U154,R299,U934,L609,D985,R115,U757,L13,D368,R936,D742,L412,U346,R56,D67,R371,D175,R868,U107,R806,D530,L40,U153,R374,D223,R517,D481,L194,U545,L356,U906,L999,D885,R967,U407,L141,U927,L489,U959,L992,U638,R332,U51,R256,U901,L891,U803,L885,U804,L242,U180,R277,U693,R935,D253,L68,D153,L614,D596,L999,D633,R995,D803,R17,U303,L569,U231,R737,D970,L45,D860,L225,D65,R41,D313,R698,D340,R599,D531,R55,D568,L911,D547,R196,D228,R868,D227,R262,U525,R104,D625,R570,U968,L276,D586,R690,D73,L336,U287,R294,U148,R781,D395,R478,D804,L429,U872,L351,D910,L597,U726,L320,D964,R928,U2,R540,D325,L222',
    path2 = 'L998,U662,R342,U104,R140,U92,R67,D102,L225,U265,R641,U592,L295,D77,R415,U908,L640,D381,R312,U44,R424,D847,R892,D625,L337,D344,L917,D914,R127,D273,L627,U812,L200,D262,R226,U273,R911,U597,L888,U28,R921,U464,R254,U771,R818,D808,L239,D225,L280,U785,R322,D831,L622,U506,R139,U12,L491,D572,L172,U685,R54,U747,L812,D717,R874,U428,L867,U174,R360,D36,R217,D539,R210,D791,L82,D665,L190,D313,R649,U849,R63,U385,R105,U806,L207,U697,L823,D272,R830,D952,L386,U987,R775,U517,R139,D756,R545,D973,L743,D286,R261,U448,R946,U884,L903,D142,R28,D374,R259,U403,R689,D245,L302,D134,R710,U762,L67,D561,R801,D140,L887,U346,L227,U682,L350,D218,L711,U755,R226,D277,R114,D61,R992,U602,L191,U640,R733,D329,R862,U242,R754,D161,L52,D974,L251,D444,L552,U977,R174,U483,R869,D955,R925,U693,R610,D353,L843,U148,L866,D167,R412,D31,L847,D979,L282,D797,L837,U473,L402,U193,L332,D603,R48,D589,L760,D673,L843,U428,R779,D592,L688,D141,R851,D642,R559,U939,R999,D64,L297,U817,R670,U322,L768,D936,L39,U95,L342,U849,L692,U714,L732,D734,L373,U66,L577,D453,R336,U760,L217,U542,R920,U24,R529,D594,L34,D79,R877,D965,R932,U460,R879,U26,R803,U876,L780,U956,L235,D270,L315,D577,R835,U750,R414,D584,L828,U335,L563,U238,L815,U780,L550,U18,R743,D54,L816,U344,L806,D197,L518,D682,L835,U255,L666,U442,L286,D543,R102,D52,L570,D787,L763,D223,R279,D892,L828,D111,L554,D452,R575,D299,R932,D187,L439,U616,L278,D701,L360,D524,L891,U953,L896,U788,R776,U782,L71,D741,L652,U121,R669,D809,L662,U319,R392,D313,R870,U794,R937,D469,R571,D761,R947';

const path1points = parse(path1), path2points = parse(path2);
const intersection = Array.from(path1points.keys()).filter(point => path2points.has(point));
const smallest = intersection.map(p => p.split(':')).reduce((acc, point) => Math.min(Math.abs(point[0]) + Math.abs(point[1]), acc), Infinity);
console.log(smallest);
console.log(intersection);
const leastSteps = intersection.reduce((acc, point) => Math.min(acc, path1points.get(point) + path2points.get(point)), Infinity);
console.log(leastSteps);


const intcode = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,10,1,19,1,19,9,23,1,23,6,27,1,9,27,31,1,31,10,35,2,13,35,39,1,39,10,43,1,43,9,47,1,47,13,51,1,51,13,55,2,55,6,59,1,59,5,63,2,10,63,67,1,67,9,71,1,71,13,75,1,6,75,79,1,10,79,83,2,9,83,87,1,87,5,91,2,91,9,95,1,6,95,99,1,99,5,103,2,103,10,107,1,107,6,111,2,9,111,115,2,9,115,119,2,13,119,123,1,123,9,127,1,5,127,131,1,131,2,135,1,135,6,0,99,2,0,14,0];
intcode[1] = 12;
intcode[2] = 2;



let noun = 0, verb = 0;
while (noun < 100) {
    const test = [...intcode];
    test[1] = noun;
    test[2] = verb;
    const result = compute(test);
    // console.log(noun, verb, result);
    if (result === 19690720) {
        console.log(100 * noun + verb);
        break;
    }
    if (verb < 99) {
        verb++;
    } else {
        noun++;
        verb = 0;
    }
}


// Day 4
let count = 0;
for (let i = 246540; i<= 787419; i++) {
    if (validateNumber(i)) {
        count++;
        console.log(i);
    }
}

console.log(count);


// Day 5

const intcode = [3,225,1,225,6,6,1100,1,238,225,104,0,1002,114,46,224,1001,224,-736,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1,166,195,224,1001,224,-137,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1001,169,83,224,1001,224,-90,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,101,44,117,224,101,-131,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1101,80,17,225,1101,56,51,225,1101,78,89,225,1102,48,16,225,1101,87,78,225,1102,34,33,224,101,-1122,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,1101,66,53,224,101,-119,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,51,49,225,1101,7,15,225,2,110,106,224,1001,224,-4539,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,88,78,225,102,78,101,224,101,-6240,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,226,677,224,102,2,223,223,1006,224,329,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,1001,223,1,223,1007,226,677,224,1002,223,2,223,1005,224,374,101,1,223,223,1008,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,404,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,419,1001,223,1,223,1107,677,226,224,1002,223,2,223,1006,224,434,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,449,1001,223,1,223,1107,677,677,224,102,2,223,223,1005,224,464,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,108,677,226,224,102,2,223,223,1005,224,509,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,524,101,1,223,223,7,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,554,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,569,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,584,101,1,223,223,1108,677,677,224,102,2,223,223,1006,224,599,1001,223,1,223,1008,677,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,8,677,677,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,107,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226];
console.log(1, compute(intcode.slice(), [1]));
console.log(5, compute(intcode.slice(), [5]));



// Day 6

function buildTree(pairs) {
    const orbiters = new Map();
    for (const [orbitee, orbiter] of pairs) {
        let myOrbiters = orbiters.get(orbitee) || [];
        myOrbiters.push(orbiter);
        orbiters.set(orbitee, myOrbiters);
    }
    return orbiters;
}

function getOrbits(tree, node, level) {
    const directOrbits = tree.get(node) || [];
    return directOrbits.reduce((total, orbit) => total + getOrbits(tree, orbit, level + 1), directOrbits.length * (level + 1));
}

function getAncestorChain(tree, node) {
    const parent = Array.from(tree.entries()).find(([,orbiters]) => orbiters.includes(node))[0];
    const ancestors = [parent];
    if (parent !== 'COM') {
        ancestors.push(...getAncestorChain(tree, parent));
    }
    return ancestors;
}




const pairs = orbits().split('\n').map(p => p.split(')'));
const tree = buildTree(pairs);

// Start with COM and keep track
// console.log(getOrbits(tree, 'COM', 0));

// Get you
const start = Array.from(tree.entries()).find(([,orbiters]) => orbiters.includes('YOU'))[0];
const end = Array.from(tree.entries()).find(([,orbiters]) => orbiters.includes('SAN'))[0];
console.log(start, end);
const startAncestors = (getAncestorChain(tree, start));
const endAncestors = (getAncestorChain(tree, end));
// Look for the nearest ancestor of both
let shortest = Infinity;
for (i = 0; i < shortest && i < startAncestors.length; i++) {
    for (j = 0; j < i + shortest && j < endAncestors.length; j++) {
        if (startAncestors[i] === endAncestors[j] && i + 1 + j + 1 < shortest) {
            shortest = i + 1 + j + 1;
            console.log(i, startAncestors[i], j, endAncestors[j]);
        }
    }
}
console.log(shortest);

*/

// Day 7
const amplifier = [3,8,1001,8,10,8,105,1,0,0,21,38,55,72,93,118,199,280,361,442,99999,3,9,1001,9,2,9,1002,9,5,9,101,4,9,9,4,9,99,3,9,1002,9,3,9,1001,9,5,9,1002,9,4,9,4,9,99,3,9,101,4,9,9,1002,9,3,9,1001,9,4,9,4,9,99,3,9,1002,9,4,9,1001,9,4,9,102,5,9,9,1001,9,4,9,4,9,99,3,9,101,3,9,9,1002,9,3,9,1001,9,3,9,102,5,9,9,101,4,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,99];
/*
function runAmplifiers(phasecode) {
    let input = 0;
    for (let i = 0; i < 5; i++) {
        input = compute(amplifier.slice(), [phasecode[i], input])[0];
    }
    return input;
}

let highest = 0, highestCombo;
const phases = [0, 1, 2, 3, 4];
for (let a of phases) {
    const phasesA = phases.filter(p => p !== a);
    for (let b of phasesA) {
        const phasesB = phasesA.filter(p => p !== b);
        for (let c of phasesB) {
            const phasesC = phasesB.filter(p => p !== c);
            for (let d of phasesC) {
                const code = [a, b, c, d, phasesC.find(p => p !== d)];
                const result = runAmplifiers(code);
                console.log(code, result);
                if (result > highest) {
                    highest = result;
                    highestCombo = code;
                }
            }
        }
    }
}
console.log(highest, highestCombo);


// Day 7 part 2

function multiAmplifier(phasecode) {
    return new Promise((resolve, reject) => {        
        // Set up computers
        const icA = new IntcodeComputer(amplifier.slice(), [phasecode[0]], 'A'),
            icB = new IntcodeComputer(amplifier.slice(), [phasecode[1]], 'B'),
            icC = new IntcodeComputer(amplifier.slice(), [phasecode[2]], 'C'),
            icD = new IntcodeComputer(amplifier.slice(), [phasecode[3]], 'D'),
            icE = new IntcodeComputer(amplifier.slice(), [phasecode[4]], 'E');

        icE.pause();
        icA.pipe(icB).pipe(icC).pipe(icD).pipe(icE).pipe(icA);
        let final;
        icE.on('end', () => resolve(final));
        icE.on('data', data => {if (data !== 6) final = data});
        icE.resume();
        icA.write(0);
    });
}

(async function(){
    let highest = 0, highestCombo;
    const phases = [5, 6, 7, 8, 9];
    for (let a of phases) {
        const phasesA = phases.filter(p => p !== a);
        for (let b of phasesA) {
            const phasesB = phasesA.filter(p => p !== b);
            for (let c of phasesB) {
                const phasesC = phasesB.filter(p => p !== c);
                for (let d of phasesC) {
                    const code = [a, b, c, d, phasesC.find(p => p !== d)];
                    const result = await multiAmplifier(code);
                    // console.log(code, result);
                    if (result > highest) {
                        highest = result;
                        highestCombo = code;
                    }
                }
            }
        }
    }
    console.log(highest, highestCombo);
})()

// Day 8

const image = ''.split('').map(i => parseInt(i));
const layers = [], length = image.length;;
while (image.length > 0) {
    layers.push(image.splice(0, (25 * 6)));
}
const chosenLayer = layers.reduce((acc, layer) => layer.filter(i => i === 0).length < acc.filter(i => i === 0).length ? layer : acc, layers[0]);
console.log(chosenLayer.filter(i => i === 1).length * chosenLayer.filter(i => i === 2).length);
// Day 8 part 2
const final = layers.reduce((acc, layer) => layer.map((pixel, i) => acc[i] === 0 || acc[i] === 1 ? acc[i] : pixel), []);
console.log(final.join(''));
const rows = [], finalLength = final.length;
while (final.length > 0) {
    rows.push(final.splice(0, 25).join('').replace(/0/g, ' ').replace(/1/g, 'X').replace(/2/g, ' '));
}
console.log(rows);


// Day 9

(async ()=>console.log(await compute([109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99])))();
(async ()=>console.log(await compute([1102,34915192,34915192,7,4,7,99,0])))();
(async ()=>console.log(await compute([104,1125899906842624,99])))();

const boost = [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1102,1,32,1016,1102,326,1,1029,1102,1,26,1009,1102,1,753,1024,1102,1,1,1021,1102,35,1,1000,1102,1,0,1020,1101,25,0,1012,1102,36,1,1011,1101,0,33,1013,1102,1,667,1022,1102,1,38,1014,1102,1,24,1017,1101,0,31,1004,1102,443,1,1026,1101,37,0,1015,1101,27,0,1007,1101,0,748,1025,1102,1,23,1008,1102,1,34,1002,1101,28,0,1006,1102,1,22,1003,1101,0,29,1005,1101,0,39,1018,1101,21,0,1019,1102,30,1,1001,1102,660,1,1023,1102,1,331,1028,1101,0,440,1027,1101,0,20,1010,109,18,1206,2,195,4,187,1105,1,199,1001,64,1,64,1002,64,2,64,109,-12,1208,0,28,63,1005,63,217,4,205,1105,1,221,1001,64,1,64,1002,64,2,64,109,3,2101,0,-5,63,1008,63,31,63,1005,63,247,4,227,1001,64,1,64,1106,0,247,1002,64,2,64,109,-7,2101,0,6,63,1008,63,26,63,1005,63,267,1105,1,273,4,253,1001,64,1,64,1002,64,2,64,109,10,21108,40,40,4,1005,1016,295,4,279,1001,64,1,64,1106,0,295,1002,64,2,64,109,-9,2107,23,0,63,1005,63,315,1001,64,1,64,1105,1,317,4,301,1002,64,2,64,109,30,2106,0,-5,4,323,1105,1,335,1001,64,1,64,1002,64,2,64,109,-19,1202,-9,1,63,1008,63,26,63,1005,63,355,1106,0,361,4,341,1001,64,1,64,1002,64,2,64,109,-5,21107,41,42,6,1005,1015,379,4,367,1105,1,383,1001,64,1,64,1002,64,2,64,109,-6,21108,42,43,8,1005,1011,403,1001,64,1,64,1105,1,405,4,389,1002,64,2,64,109,11,21102,43,1,1,1008,1015,42,63,1005,63,425,1106,0,431,4,411,1001,64,1,64,1002,64,2,64,109,13,2106,0,0,1105,1,449,4,437,1001,64,1,64,1002,64,2,64,109,1,1205,-7,463,4,455,1106,0,467,1001,64,1,64,1002,64,2,64,109,-14,1206,7,479,1105,1,485,4,473,1001,64,1,64,1002,64,2,64,109,-6,1202,0,1,63,1008,63,23,63,1005,63,507,4,491,1106,0,511,1001,64,1,64,1002,64,2,64,109,13,1205,-1,523,1106,0,529,4,517,1001,64,1,64,1002,64,2,64,109,-23,2107,22,10,63,1005,63,551,4,535,1001,64,1,64,1106,0,551,1002,64,2,64,109,14,21101,44,0,6,1008,1018,44,63,1005,63,577,4,557,1001,64,1,64,1106,0,577,1002,64,2,64,109,-12,2108,32,0,63,1005,63,597,1001,64,1,64,1105,1,599,4,583,1002,64,2,64,109,7,1201,-4,0,63,1008,63,20,63,1005,63,619,1106,0,625,4,605,1001,64,1,64,1002,64,2,64,109,-11,1201,6,0,63,1008,63,34,63,1005,63,647,4,631,1106,0,651,1001,64,1,64,1002,64,2,64,109,20,2105,1,7,1001,64,1,64,1106,0,669,4,657,1002,64,2,64,109,-4,21101,45,0,6,1008,1018,46,63,1005,63,689,1106,0,695,4,675,1001,64,1,64,1002,64,2,64,109,-16,2108,22,7,63,1005,63,717,4,701,1001,64,1,64,1105,1,717,1002,64,2,64,109,10,1207,0,27,63,1005,63,733,1105,1,739,4,723,1001,64,1,64,1002,64,2,64,109,8,2105,1,10,4,745,1105,1,757,1001,64,1,64,1002,64,2,64,109,1,21102,46,1,-2,1008,1013,46,63,1005,63,779,4,763,1106,0,783,1001,64,1,64,1002,64,2,64,109,-2,1208,-7,29,63,1005,63,799,1105,1,805,4,789,1001,64,1,64,1002,64,2,64,109,-19,2102,1,10,63,1008,63,32,63,1005,63,829,1001,64,1,64,1106,0,831,4,811,1002,64,2,64,109,14,1207,-2,29,63,1005,63,849,4,837,1105,1,853,1001,64,1,64,1002,64,2,64,109,8,21107,47,46,-6,1005,1010,873,1001,64,1,64,1106,0,875,4,859,1002,64,2,64,109,-17,2102,1,6,63,1008,63,29,63,1005,63,901,4,881,1001,64,1,64,1106,0,901,4,64,99,21102,1,27,1,21102,1,915,0,1106,0,922,21201,1,27817,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1105,1,922,21202,1,1,-1,21201,-2,-3,1,21102,1,957,0,1105,1,922,22201,1,-1,-2,1106,0,968,22102,1,-2,-2,109,-3,2105,1,0];
compute([...boost], [1]).then(console.log.bind(console));

// Day 9 part 2
compute(boost, [2]).then(console.log.bind(console));


// Day 10

const map = `.#..#..#..#...#..#...###....##.#....
.#.........#.#....#...........####.#
#..##.##.#....#...#.#....#..........
......###..#.#...............#.....#
......#......#....#..##....##.......
....................#..............#
..#....##...#.....#..#..........#..#
..#.#.....#..#..#..#.#....#.###.##.#
.........##.#..#.......#.........#..
.##..#..##....#.#...#.#.####.....#..
.##....#.#....#.......#......##....#
..#...#.#...##......#####..#......#.
##..#...#.....#...###..#..........#.
......##..#.##..#.....#.......##..#.
#..##..#..#.....#.#.####........#.#.
#......#..........###...#..#....##..
.......#...#....#.##.#..##......#...
.............##.......#.#.#..#...##.
..#..##...#...............#..#......
##....#...#.#....#..#.....##..##....
.#...##...........#..#..............
.............#....###...#.##....#.#.
#..#.#..#...#....#.....#............
....#.###....##....##...............
....#..........#..#..#.......#.#....
#..#....##.....#............#..#....
...##.............#...#.....#..###..
...#.......#........###.##..#..##.##
.#.##.#...##..#.#........#.....#....
#......#....#......#....###.#.....#.
......#.##......#...#.#.##.##...#...
..#...#.#........#....#...........#.
......#.##..#..#.....#......##..#...
..##.........#......#..##.#.#.......
.#....#..#....###..#....##..........
..............#....##...#.####...##.`
.split('\n').map(row => row.split('').reduce((acc, ast, i) => ast === '#' ? [...acc, i] : acc, []));

console.log(map);

// const asteroids = map.reduce((set, row, y) => row.reduce((set, ast, x) => {if (ast) set.add(`${x},${y}`); return set;}, set), new Set);
// console.log(asteroids);

let mostVisible = 0, best = null;
for ([y, row] of map.entries()) {
    for (x of row) {
        // console.log('Candidate', x, y);
        let visible = 0;

        for ([tY, tRow] of map.entries()) {
            for (tX of tRow) {
                if (tX === x && tY === y) continue;
                // console.log(' Target', tX, tY);
                const dtX = tX - x, dtY = tY - y;
                let canSee = true;

                for ([bY, bRow] of map.entries()) {
                    if (bY < Math.min(y, tY) || bY > Math.max(y, tY)) continue;
                    for (bX of bRow) {
                        if ((bX === x && bY === y) || (bX === tX && bY === tY)) continue;
                        if (bX < Math.min(x, tX) || bX > Math.max(x, tX)) continue;
                        const dbX = bX - x, dbY = bY - y;
                        if (
                            // X and Y have same angle
                            dbX / dbY === dtX / dtY
                            // Blocker is closer than target
                            // Same sign and smaller abs
                            && dbX * dtX >= 0
                            && dbY * dtY >= 0
                            && (Math.abs(dtX) > Math.abs(dbX) || Math.abs(dtY) > Math.abs(dbY))
                        ) {
                            canSee = false;
                            // console.log('  ', bX, bY, 'Blocks');
                            break;
                        } else {
                            // console.log('  ', bX, bY, 'Does not block');
                        }
                    }
                }

                if (canSee) {
                    visible++;
                }
            }
        }
        // console.log(x, y, 'can see', visible);
        if (visible > mostVisible) {
            mostVisible = visible;
            best = {x,y};
        }
    }
}


console.log(best, mostVisible);

// Day 10 part 2

// Find the angle of each asteroid to the laser
const laserX = best.x, laserY = best.y;

let asteroids = new Map;
for ([y, row] of map.entries()) {
    for (x of row) {
        if (x === laserX && y === laserY) continue;
        const dX = x - laserX, dY = laserY - y;
        // Determine which quadrant
        let angle = Math.atan2(dY, dX);
        if (dX >= 0 && dY >= 0) { // Top-right - 0-90
            angle = (angle * (-1)) + (Math.PI/2);
        }
        else if (dY < 0) { // Bottom - 90-270
            angle = (Math.PI/2) - angle;
        }
        else if (dX < 0 && dY >= 0) { // Top-left - 270-360
            angle = (Math.PI*5/2) - angle;
        }

        const distance = Math.sqrt(Math.pow(dX, 2) + Math.pow(dY, 2)); // Good old Pythagoras
        const object = {x, y, dX, dY, angle, distance};

        const angleAsteroids = asteroids.get(angle) || [];
        let i = 0;
        while (i < angleAsteroids.length && distance >= angleAsteroids[i].distance) {
            i++;
        }
        angleAsteroids.splice(i, 0, object);
        asteroids.set(angle, angleAsteroids);
    }
}
// Sort the asteroids by angle then distance
asteroids = new Map(Array.from(asteroids.entries()).sort(([angleA], [angleB]) => angleA - angleB));
// console.log(asteroids.entries());
let i = 0;
while (asteroids.size) {
    for ([key, angleAsteroids] of asteroids.entries()) {
        const {x, y, dX, dY, angle, distance} = angleAsteroids.shift();
        console.log(`${++i}.\t${x},${y}\t${dX},${dY}\t${angle}\t${distance}`);
        if (angleAsteroids.length === 0) {
            asteroids.delete(key);
        }
    }
}

console.log(laserX, laserY)
// Sort by angle then by distance from laser
// Make a Map of angles to array of asteroids sorted by distance
// Go through the Map, removing one from each array each time
// If an array is empty, remove its entry from the Map


// Day 11
(async () => {
    const computer = new IntcodeComputer([3,8,1005,8,350,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,102,1,8,29,1006,0,82,1006,0,40,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,57,1,102,15,10,1,1005,14,10,1006,0,33,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,102,1,8,90,1,1008,14,10,2,3,19,10,1006,0,35,1006,0,21,3,8,102,-1,8,10,1001,10,1,10,4,10,108,1,8,10,4,10,1002,8,1,125,1,1105,11,10,2,1105,9,10,1,4,1,10,2,1,4,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,0,10,4,10,101,0,8,164,1006,0,71,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,1002,8,1,189,1006,0,2,1,5,17,10,1006,0,76,1,1002,7,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,1001,8,0,224,1,3,5,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,250,1,1,20,10,1,102,13,10,2,101,18,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,284,2,105,0,10,1,105,20,10,3,8,1002,8,-1,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,315,1006,0,88,1,2,4,10,2,8,17,10,2,6,2,10,101,1,9,9,1007,9,1056,10,1005,10,15,99,109,672,104,0,104,1,21102,1,847069688728,1,21101,0,367,0,1106,0,471,21102,386577216404,1,1,21102,378,1,0,1105,1,471,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,97952923867,0,1,21102,425,1,0,1106,0,471,21101,0,29033143319,1,21102,436,1,0,1105,1,471,3,10,104,0,104,0,3,10,104,0,104,0,21102,1,868410614628,1,21101,0,459,0,1105,1,471,21101,837896909672,0,1,21101,0,470,0,1105,1,471,99,109,2,22102,1,-1,1,21101,40,0,2,21102,502,1,3,21102,492,1,0,1106,0,535,109,-2,2105,1,0,0,1,0,0,1,109,2,3,10,204,-1,1001,497,498,513,4,0,1001,497,1,497,108,4,497,10,1006,10,529,1102,1,0,497,109,-2,2105,1,0,0,109,4,2101,0,-1,534,1207,-3,0,10,1006,10,552,21101,0,0,-3,22101,0,-3,1,22101,0,-2,2,21102,1,1,3,21101,571,0,0,1106,0,576,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,599,2207,-4,-2,10,1006,10,599,21202,-4,1,-4,1105,1,667,21202,-4,1,1,21201,-3,-1,2,21202,-2,2,3,21102,1,618,0,1106,0,576,21201,1,0,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,637,21102,0,1,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,659,21202,-1,1,1,21101,659,0,0,106,0,534,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2105,1,0]);
    let x = 0, y = 0, direction = 0; // up
    const squares = new Map([['0,0', 1]]); // Start on white for part 2

    computer.on('end', () => {
        // Find the smallest x and y to avoid negative numbers
        let smallestX = 0, smallestY = 0;
        for (key of squares.keys()) {
            const [x,y] = key.split(',');
            smallestX = Math.min(x, smallestX);
            smallestY = Math.min(y, smallestY);
        }
        // For each one, add the offsets and plot
        const message = [];
        for ([key, colour] of squares.entries()) {
            let [x, y] = key.split(',');
            x -= smallestX;
            y -= smallestY;
            if (!message[y]) {
                message[y] = [];
            }
            message[y][x] = colour ? '#' : ' ';
        }
        console.log(squares.size);
        console.log(message.map(row => row.join('')));
    });

    // Get async iterator
    const iterator = computer[Symbol.asyncIterator]();

    while (true) {
        // Send the new colour in
        // console.log('Providing', squares.get(`${x},${y}`) || 0, 'from', x, y);
        computer.write(squares.get(`${x},${y}`) || 0);

        // Get results
        const colourOutput = await iterator.next();
        // console.log('Colour', colourOutput)
        if (colourOutput.done) {
            console.log('Done', squares, squares.size);
            break;
        }
        if (colourOutput.value !== 0 && colourOutput.value !== 1) {
            throw new Error(`Invalid colour value ${colourOutput.value}`);
        }
        // console.log('Painting', x, y, colour ? 'white' : 'black');
        squares.set(`${x},${y}`, colourOutput.value);

        // Get next direction
        const turnOutput = await iterator.next();
        // console.log('Turn  ', turnOutput);
        if (turnOutput.done) {
            console.log('Done', squares, squares.size);
            break;
        }
        if (turnOutput.value !== 0 && turnOutput.value !== 1) {
            throw new Error(`Invalid turn value ${turnOutput.value}`);
        }
        // 0 - left, 1 - right
        if (turnOutput.value === 1) {
            direction = (direction + 1) % 4;
        } else {
            direction = (direction || 4) - 1;
        }

        // console.log('Turning', turn ? 'right' : 'left', 'from', direction)
        
        // Actually move
        switch (direction) {
            case 0: y--; break;
            case 1: x++; break;
            case 2: y++; break;
            case 3: x--; break;
        }

        // console.log('Moving to', x, y);
    
    }
})();
*/

// Day 12
class Moon {
    constructor(x, y, z) {
        this.pos = {x, y, z};
        this.vel = {x: 0, y: 0, z: 0};
    }

    move() {
        this.pos.x += this.vel.x;
        this.pos.y += this.vel.y;
        this.pos.z += this.vel.z;
    }

    serializeAxis(axis) {
        return `${this.pos[axis]}:${this.vel[axis]}`;
    }

    getEnergy() {
        return (Math.abs(this.pos.x) + Math.abs(this.pos.y) + Math.abs(this.pos.z)) * (Math.abs(this.vel.x) + Math.abs(this.vel.y) + Math.abs(this.vel.z));
    }
}

const axes = ['x','y','z'];
class System {
    constructor(moons) {
        this.moons = moons;
        this.pairs = [];
        for (let i = 0; i < moons.length; i++) {
            for (let j = i + 1; j < moons.length; j++) {
                this.pairs.push([moons[i], moons[j]]);
            }
        }
    }

    doStep() {
        for (const axis of axes) {
            for (const [moon1, moon2] of this.pairs) {
                if (moon1.pos[axis] > moon2.pos[axis]) {
                    moon1.vel[axis]--;
                    moon2.vel[axis]++;
                } else if (moon1.pos[axis] < moon2.pos[axis]) {
                    moon1.vel[axis]++;
                    moon2.vel[axis]--;
                }
            }
            for (const moon of this.moons) {
                moon.pos[axis] += moon.vel[axis];
            }
        }
    }

    getTotalEnergy() {
        return this.moons.reduce((total, moon) => total + moon.getEnergy(), 0);
    }

    serializeAxis(axis) {
        return this.moons.map(moon => moon.serializeAxis(axis)).join('|');
    }
}


const system = new System([
    // new Moon(-1, 0, 2),
    // new Moon(2, -10, -7),
    // new Moon(4, -8, 8),
    // new Moon(3, 5, -1)

    // new Moon(-8, -10, 0),
    // new Moon(5, 5, 10),
    // new Moon(2, -7, 3),
    // new Moon(9, -8, -3)

    new Moon(-3, 15, -11),
    new Moon(3, 13, -19),
    new Moon(-13, 18, -2),
    new Moon(6, 0, -1)
]);

function day12(){
    const steps = 100;
    for (let i = 0; i < steps; i++) {
        // console.log(i, system.moons);
        system.doStep();
    }
    // console.log(steps, moons);
    console.log('Total Energy', system.getTotalEnergy());
}

// Day 12 part 2

function day12p2() {

    const states = {
        x: new Map,
        y: new Map,
        z: new Map
    };
    let start = {}, loopSize = {};
    let step = 0;
    while (!loopSize.x || !loopSize.y || !loopSize.z) {
        // Check if we've found a loop
        for (let axis of axes) {
            if (loopSize[axis]) continue;
            const state = system.serializeAxis(axis);
            if (states[axis].has(state)) {
                start[axis] = states[axis].get(state);
                loopSize[axis] = step - start[axis];
                console.log('Found loop for', axis, 'starting at', start[axis], 'size', loopSize[axis]);
            } else {
                states[axis].set(state, step);
            }
        }

        // Progress the system
        step++;
        system.doStep();
    }

    // We have the loop sizes and start points
    // Now we find when they coincide
    // The first point where they coincide is after all the start points
    const firstCoincidence = Math.max(start.x, start.y, start.z);
    // Overall loop size is the lowest common multiple of the loop sizes
    let totalLoopSize = lcm([loopSize.x, loopSize.y, loopSize.z]);
    // This is where the loops coincide. The first repeating element
    // is the beginning of the smallest loop
    // totalLoopSize -= (Math.min(loopSize.x, loopSize.y, loopSize.z) - 1);
    // and remove the starting bit
    totalLoopSize -= firstCoincidence;
    console.log(totalLoopSize);
}

function lcm(values) {
    // First, factorize the values
    const primeFactors = values.map(factorize);
    console.log(primeFactors)

    // Any prime factors that exist in more than one set can be removed (once)
    for (let i=0; i<primeFactors.length; i++) {
        for (let j=i+1; j<primeFactors.length; j++) {
            for (value of primeFactors[i]) {
                const pos = primeFactors[j].indexOf(value);
                if (pos > -1) {
                    primeFactors[j].splice(pos, 1);
                }
            }
        }
    }
    console.log(primeFactors)
    return primeFactors.flat().reduce((acc,fac) => acc * fac, 1);
}

function factorize(num) {
    for (let i=2; i<num/3; i++) {
        if (num % i === 0) {
            return [...factorize(i), ...factorize(num / i)];
        }
    }
    // It's already prime
    return [num];
}



// Day 13

class Game {
    constructor(intcode) {
        this.computer = new IntcodeComputer(intcode);
        this.iterator = this.computer[Symbol.asyncIterator]();
        this.gameBoard = [];
        this.score = 0;
        this.joystickPosition = 0;
    }

    printBoard() {
        const symbol = [' ', '#', '*', '=', 'O'];
        return this.gameBoard.map(row => row.map(cell => symbol[cell]).join('')).join('\n');
    }

    async step() {
        this.computer.write(this.joystickPosition);

        while(true) {

            const {value: x, done} = await this.iterator.next();
            if (done) {
                return true; // Finished the game
            }
            if (x === '') { // Input needed
                return false;
            }
            const {value: y} = await this.iterator.next();
            const {value: type} = await this.iterator.next();
            
            if (x === -1 && y === 0) {
                this.score = type;
            } else {
                this.gameBoard[y] = this.gameBoard[y] || [];
                this.gameBoard[y][x] = type;

                // If it's the ball or paddle, cache the position
                if (type === 4) {
                    // if (this.ballX)
                        this.ballXdirection = Math.sign(x - this.ballX);
                    // if (this.ballY)
                        this.ballYdirection = Math.sign(y - this.ballY);
                    this.ballX = x;
                    this.ballY = y;
                }
                else if (type === 3) {
                    this.paddleX = x;
                    this.paddleY = y;
                }
            }
        }
    }
}


function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

(async function day13(){
    const intcode = [1,380,379,385,1008,2415,504308,381,1005,381,12,99,109,2416,1101,0,0,383,1102,1,0,382,20101,0,382,1,20102,1,383,2,21102,1,37,0,1106,0,578,4,382,4,383,204,1,1001,382,1,382,1007,382,37,381,1005,381,22,1001,383,1,383,1007,383,24,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1105,1,161,107,1,392,381,1006,381,161,1101,-1,0,384,1105,1,119,1007,392,35,381,1006,381,161,1101,0,1,384,20102,1,392,1,21102,22,1,2,21102,1,0,3,21101,0,138,0,1106,0,549,1,392,384,392,21002,392,1,1,21102,1,22,2,21102,1,3,3,21102,1,161,0,1105,1,549,1102,0,1,384,20001,388,390,1,20101,0,389,2,21101,0,180,0,1106,0,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,21002,389,1,2,21102,205,1,0,1105,1,393,1002,390,-1,390,1102,1,1,384,21002,388,1,1,20001,389,391,2,21102,228,1,0,1106,0,578,1206,1,261,1208,1,2,381,1006,381,253,20101,0,388,1,20001,389,391,2,21101,253,0,0,1105,1,393,1002,391,-1,391,1102,1,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21101,279,0,0,1106,0,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21101,0,304,0,1106,0,393,1002,390,-1,390,1002,391,-1,391,1102,1,1,384,1005,384,161,21001,388,0,1,21001,389,0,2,21101,0,0,3,21102,1,338,0,1105,1,549,1,388,390,388,1,389,391,389,20102,1,388,1,20102,1,389,2,21101,0,4,3,21101,0,365,0,1105,1,549,1007,389,23,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,286,16,19,1,1,18,109,3,22102,1,-2,1,22102,1,-1,2,21101,0,0,3,21101,0,414,0,1106,0,549,21202,-2,1,1,22101,0,-1,2,21102,429,1,0,1105,1,601,2101,0,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2106,0,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,21201,-3,0,-7,109,-8,2105,1,0,109,4,1202,-2,37,566,201,-3,566,566,101,639,566,566,2102,1,-1,0,204,-3,204,-2,204,-1,109,-4,2106,0,0,109,3,1202,-1,37,594,201,-2,594,594,101,639,594,594,20101,0,0,-2,109,-3,2106,0,0,109,3,22102,24,-2,1,22201,1,-1,1,21101,449,0,2,21102,721,1,3,21101,888,0,4,21102,1,630,0,1105,1,456,21201,1,1527,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,2,2,2,0,2,2,2,0,2,2,2,2,0,0,2,2,0,2,0,0,2,0,2,2,2,2,0,2,0,0,1,1,0,0,2,0,0,0,2,0,2,2,0,0,0,2,2,2,0,0,0,2,2,2,0,2,2,0,0,0,0,0,0,0,2,0,0,1,1,0,0,2,0,2,0,2,0,2,0,2,2,0,2,0,2,0,2,2,2,0,0,2,2,2,0,2,0,2,2,2,2,0,0,0,1,1,0,0,2,0,0,0,0,2,0,0,0,2,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,2,2,2,0,1,1,0,2,2,2,0,0,2,2,2,2,2,2,0,2,0,0,0,2,0,0,2,2,2,0,2,0,2,0,2,0,0,2,2,2,0,1,1,0,0,2,2,2,2,0,2,0,2,0,0,2,0,2,2,2,2,2,0,2,0,2,2,0,2,0,2,2,2,0,2,2,0,0,1,1,0,0,0,0,2,2,2,2,2,0,0,2,0,0,0,0,2,0,2,2,0,2,2,2,2,2,0,2,2,0,0,0,2,2,0,1,1,0,2,0,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,2,0,2,2,0,2,0,2,0,0,0,0,0,0,1,1,0,0,0,2,2,0,0,2,0,0,2,2,2,2,2,0,0,2,2,2,2,0,2,0,0,0,2,2,2,0,2,2,2,2,0,1,1,0,0,0,0,0,2,0,2,2,2,0,0,2,2,2,0,2,2,2,0,0,2,2,0,2,2,2,2,0,0,2,2,2,0,0,1,1,0,0,2,0,2,2,2,2,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,0,0,0,2,2,0,0,0,2,2,2,0,1,1,0,0,2,0,2,2,2,2,0,0,0,0,0,2,2,2,2,2,2,0,0,2,2,0,2,0,0,2,2,2,2,2,2,0,0,1,1,0,0,2,0,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,2,2,0,2,0,2,2,2,2,0,2,0,2,0,1,1,0,0,2,2,2,0,2,2,2,2,0,2,0,2,0,2,0,0,0,0,0,0,2,2,0,2,2,2,2,0,0,2,2,0,0,1,1,0,0,0,2,0,2,2,2,0,0,2,2,2,0,2,0,0,2,2,2,0,2,0,2,2,0,2,2,2,2,0,0,0,0,0,1,1,0,2,2,0,2,2,0,2,0,2,2,2,2,0,2,2,0,2,2,2,0,2,0,0,0,2,0,2,0,0,0,0,0,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,72,24,61,53,70,95,17,71,27,25,75,75,9,41,47,87,93,47,92,11,93,87,16,9,94,89,5,46,23,64,39,44,23,93,27,28,10,82,54,70,26,84,86,88,64,20,6,8,8,27,46,80,6,57,15,35,55,86,30,72,88,50,49,11,31,76,89,50,24,13,71,45,35,46,57,14,84,36,1,41,48,87,67,92,83,28,41,7,33,60,66,16,46,42,49,47,53,27,60,84,63,32,23,17,67,61,56,7,31,68,43,50,37,36,56,6,65,35,9,56,15,32,64,68,7,52,30,15,55,71,57,97,31,60,37,35,85,96,59,14,83,76,47,71,65,39,37,22,77,90,60,38,29,72,11,49,40,20,26,19,80,83,58,67,50,94,79,62,86,57,76,44,36,37,55,67,6,26,34,63,80,33,64,45,39,93,70,26,4,71,79,71,21,70,31,48,58,50,54,74,53,31,89,78,57,70,52,70,85,68,5,1,55,12,25,74,81,36,3,3,8,97,9,62,58,80,45,87,45,17,80,62,25,63,29,97,84,55,11,28,86,55,39,81,93,48,67,46,62,79,58,63,87,66,89,23,81,95,22,41,29,87,30,14,67,94,13,7,32,56,66,29,89,77,17,54,12,82,59,83,89,65,72,56,78,97,5,24,20,27,5,37,66,68,77,16,9,66,41,43,18,94,84,86,42,25,47,72,7,8,93,28,68,6,75,55,44,36,15,71,9,49,66,80,77,81,13,7,73,1,86,17,80,36,12,57,42,1,50,87,74,37,60,91,92,46,75,1,17,83,65,49,61,44,13,69,36,90,10,35,61,53,66,11,62,33,14,58,24,82,11,68,48,20,96,68,56,57,77,71,24,41,46,81,43,55,96,30,69,63,23,86,55,83,1,23,88,88,20,66,39,23,26,2,21,80,57,68,3,88,68,1,76,67,84,63,89,45,84,20,97,29,97,7,92,84,65,49,31,93,63,30,89,96,93,37,15,97,30,69,39,1,22,68,5,75,38,39,62,19,24,30,38,36,27,93,1,3,27,39,69,3,86,42,92,81,18,37,16,94,1,94,47,81,51,25,11,6,25,28,78,50,89,39,6,41,27,31,22,17,33,76,2,36,64,79,14,81,91,11,45,12,17,57,70,17,49,54,45,83,71,68,25,89,62,4,55,73,77,98,1,1,36,11,12,78,56,71,96,55,85,71,49,57,68,14,76,63,22,60,79,11,61,49,39,36,33,59,73,85,8,38,3,21,65,21,31,69,54,85,38,26,5,73,43,87,15,44,80,10,92,54,75,96,26,53,84,37,1,76,53,77,68,13,67,64,11,31,32,86,85,71,98,37,53,45,3,3,87,20,20,36,95,87,41,74,23,76,78,19,45,57,41,89,1,11,42,85,74,13,3,72,19,20,64,25,51,82,97,45,55,37,86,2,25,40,26,78,76,16,11,14,36,96,89,90,64,96,79,32,17,47,79,80,53,19,26,59,74,54,53,58,32,48,9,64,96,3,20,88,1,92,44,45,10,4,67,91,81,26,40,89,83,53,83,84,18,53,6,94,51,59,27,38,41,63,2,8,48,64,4,90,88,21,14,37,68,46,1,73,21,14,41,65,81,97,56,90,24,30,81,68,19,16,47,65,53,68,26,54,26,56,15,25,83,89,20,92,4,49,37,42,5,54,7,27,43,36,85,41,59,44,33,93,45,46,23,19,52,20,87,25,85,21,22,20,43,70,35,33,27,17,23,9,56,33,53,55,22,91,69,73,20,23,86,95,14,24,59,60,37,48,94,69,86,63,39,50,84,85,46,65,4,42,97,12,66,37,89,47,29,59,25,47,74,44,24,22,73,45,60,70,11,40,83,49,95,17,9,85,2,27,90,60,32,87,62,36,91,38,19,92,2,33,30,17,43,13,81,53,93,75,14,67,97,95,53,20,63,5,45,63,84,92,65,65,70,33,11,79,82,89,36,59,90,74,6,74,17,96,40,72,89,84,51,17,40,42,504308];
    // const game = new Game([...intcode]);
    // await game.step();
    // console.log(game.gameBoard.flat().filter(t => t === 2).length);

    // Part 2
    intcode[0] = 2;
    const game2 = new Game([...intcode]);
    // Handle the joystick
    const readline = require('readline');

    readline.emitKeypressEvents(process.stdin);
    process.stdin.setRawMode(true);

    process.stdin.on('keypress', (str, key) => {
        if (str === 'q') {
            process.exit();
        }
        else if (str === 'z') {
            game2.joystickPosition = -1;
        }
        else if (str === 'x') {
            game2.joystickPosition = 0;
        }
        else if (str === 'c') {
            game2.joystickPosition = 1;
        }
    });
    // Run the game
    while (!await game2.step()) {
        console.log('Score', game2.score, 'Joystick position', game2.joystickPosition, 'Ball position', game2.ballX, game2.ballY);
        console.log(game2.printBoard());

        await wait(200);

        // Predict where the ball will land when it reaches the paddle
        let downXDirection, downXstart, downYstart;
        if (game2.ballYdirection === -1) { // Going up
            // Figure out where it's going to hit and which way it will bounce down
            // If it ends up directly under a block, it bounces down the opposite way
            // If it ends up with a rock in front and above, it bounces down the same way
            for (let i=1; true; i++) {
                const curX = game2.ballX + (i * game2.ballXdirection);
                const curY = game2.ballY + (i * game2.ballYdirection);
                if (game2.gameBoard[curY - 1][curX] > 0) {
                    console.log('Going to hit', curX, curY - 1, 'Now at', curX, curY);
                    // Bounce down the opposite way
                    downXDirection = game2.ballXdirection;
                    downXstart = curX;
                    downYstart = curY;
                    break;
                } else if (game2.gameBoard[curY - 1][curX + game2.ballXdirection] > 0) {
                    console.log('Going to hit', curX + game2.ballXdirection, curY - 1, 'Now at', curX, curY);
                    downXDirection = game2.ballXdirection * -1;
                    downXstart = curX;
                    downYstart = curY;
                    break;
                }
            }
        } else {
            downXDirection = game2.ballXdirection;
            downXstart = game2.ballX;
            downYstart = game2.ballY;
        }
        // Going down
        // How many steps away is it
        const ticks = game2.paddleY - downYstart - 1;
        // Paddle needs to be the same number of ticks in the right direction
        const paddleNeedsToBe = downXstart + (ticks * downXDirection);
        game2.joystickPosition = Math.sign(paddleNeedsToBe - game2.paddleX);
    }
    // const readline = require('readline'), rl = readline.createInterface({input: process.stdin, output: process.stdout});
    // const iterator = rl[Symbol.asyncIterator]();
    
    // process.stdin.on('data', data => console.log('stdin', data));
    // while (!await game2.step(joystickPosition)) {
        // console.log('Score', game2.score);
        // console.log(game2.printBoard());
        // joystickPosition = parseInt((await iterator.next()).value, 10);
    // }

})();








function orbits() { 
    return `21X)BWV
YZJ)YLQ
FQS)PZW
R64)71F
ZH4)QVZ
LWB)H4Q
4HQ)PVJ
TZ5)VBV
LF1)FKZ
GKS)BGN
45B)2NS
14W)2JY
1XY)FJ8
ZRC)WR9
GCL)6PB
LP4)GQ8
26V)HTK
3M8)1GJ
47Q)JYK
WDB)N2R
KH8)TGY
LFX)N2X
VSZ)7PC
M6W)4WL
HH9)8PC
L59)8Y8
Q49)LWH
CJ5)XDG
K51)FGH
H31)2RJ
39M)Y4M
12C)VLF
PZW)7DW
MP2)19Q
R76)CHH
N6J)KBW
WR9)W25
T99)ZF1
1TS)8SM
8WW)YX7
PW6)B2J
7KX)YM5
HM6)GVX
DNB)2YP
6WC)2LW
BG5)SB6
KK1)JTF
YDT)244
GGQ)2DJ
GCP)Q8H
S1Y)J69
LBV)DYG
ZKN)JBS
8XY)Y8Z
XMH)NHD
XVM)2LX
SYP)BC8
PXH)YYG
F29)G9Y
BYX)4QS
8MY)S1D
N2Y)BZK
FRC)72W
S2K)YH5
7JF)K65
DJ9)K4L
P26)WXT
DW9)1DJ
NP4)3SB
XS7)CDL
6XH)4ZT
2DJ)GCP
2K4)VV1
Q6P)NNN
HQW)ZR9
9G2)FNB
H9N)5ZJ
13Z)GKD
9MW)37Y
VDY)BG9
BL3)12C
LNN)JST
Z3V)T39
XS3)WYG
8J5)QFQ
7DW)DXY
JMV)DM4
VL3)V7Q
GZC)ZHV
3N6)R2H
FQ6)7LG
SR9)D66
1M8)K2L
24N)M94
JST)WM9
7SB)99Q
58J)YN7
WWH)5KS
C39)X9J
58S)KBP
TVF)VNG
TKC)Y34
KKP)4S6
XSP)939
N6J)DZP
JXP)N6R
KNJ)7FS
N3V)LMJ
JVF)R94
21C)R4Z
NYK)5GN
GVJ)Q6C
R69)NRS
GLS)C7D
T4J)46R
5GB)51S
9WD)7PN
HHX)KK2
H2P)ZML
DWD)Q9F
FKZ)LC3
Q9F)M8N
CRZ)LM1
6DP)YML
NSR)L2X
PMX)Q7K
37R)1GF
L4G)P4W
17N)X6D
JTF)89B
JGJ)DVJ
VF9)GMW
NHD)DJ3
TRY)F6S
J11)BVW
95X)XB5
3XD)HPM
7BB)1LW
FJ8)TV4
JV3)M9W
T7L)6SS
R48)LSB
F2P)9D2
PTY)QBY
KXM)6G1
N1H)Q2R
P27)SR9
1S2)N3G
V7Q)642
891)TW7
B9Y)BRL
GW4)3XZ
QWM)G46
WVK)S6N
N82)317
8PG)S21
NT3)1VX
QB5)Y3H
PTT)639
G8M)WM8
B36)LX9
M9M)4P3
3F9)Q3R
DND)TJL
VQB)6N3
PJT)JTK
BBN)T4L
LYP)M3V
T9R)HH9
XBR)3X5
MX3)SWF
SF1)MXT
X67)6DQ
82Z)FQ4
L64)FNG
CDG)5D9
JKZ)XZ5
MH1)1KD
5NW)ZH4
P3T)76Z
2M4)CKW
54L)8P7
JSH)5H5
LGR)P2V
QNV)SJ7
KPS)XMQ
F2H)49M
8NJ)KKP
XZ1)LRZ
RVK)J5Z
QT9)NGQ
1TK)P7X
39M)595
DN9)HKY
HK1)ZRH
SH1)JV5
B25)GQ6
QZC)WYC
6CJ)F5D
5R1)HQ7
FNT)P4J
4R6)P49
LG4)QT9
GWH)RY1
1FX)ZK8
HK4)G2N
4WL)GPR
SQT)KK1
RT4)FCN
NRF)P84
DQW)4L4
52N)T4J
69D)2FV
RMV)J7N
S9J)1WM
B88)9GT
5M7)GXN
3XF)6FX
FL9)8VZ
X88)JZR
ZVZ)8J2
Q83)94V
82Y)HT7
7Y7)7X3
KNK)R1W
469)PMG
D9Z)GD1
Z62)WR1
YDF)6B6
5KS)6GW
57T)ML7
GXC)R89
S2N)99C
JFH)RP9
KPH)R26
DZX)93P
CWT)C2H
VKN)5M7
VNG)SH1
G2N)F6Q
NFV)FK3
R65)TQL
Z6T)4NG
RQN)KPR
972)9TB
KZ1)6TY
8K2)HKL
KHJ)H1W
6N3)XTR
25Q)T49
8HF)K9M
GQX)PHP
5ZJ)9S7
C7D)VMJ
JXV)SJD
J17)64C
5XN)WN7
PH9)WQH
43T)Q9V
Z5F)NZ8
VHQ)D95
244)7KX
6N7)JPH
HC8)HND
ZF1)39F
24X)ZPF
BWV)HQW
R3N)5R1
QB9)6XY
KHW)KFZ
S2V)DRQ
S21)1RQ
C9V)TSD
Q1Y)LC2
93Y)W5C
8ST)T4P
R5Z)CL4
424)WNZ
R7M)5JS
4R6)H97
ZXZ)S62
FRH)SBJ
ZK8)N82
6FX)MTK
Z5M)BRQ
YYP)FX8
RZJ)DRK
V8G)TKQ
5L9)J1G
RZG)69H
R9G)X79
WFS)ZJQ
4P8)GXC
TYW)S54
R2H)QH7
6HX)F2H
BBD)DC5
DDB)6WC
2G3)4JN
FKC)K7V
XTK)8BD
Z7X)QGY
8CG)3F9
F39)MM9
F1L)1R7
ZVH)JDC
BVW)PXM
PRV)BF7
FX8)1XR
FB2)XN6
R9L)Z1V
YDT)H52
6Z5)XZ1
QD2)Z7Y
TLS)6T3
54C)DL7
KPR)4TY
19N)415
1QG)GNN
S6N)4MK
4L8)LD2
5Z7)PRY
5C4)2MC
94B)DY3
CVK)GTS
7N7)P27
5MW)GGH
2HQ)JYL
L9J)HLP
5Y4)NGN
2BZ)GWN
HD8)CZS
HQ7)M9D
DC5)RK6
66W)2VT
3D4)GHZ
T49)VTP
PL4)ZS9
SJ7)TRC
NKT)G5Y
K1G)3GN
37V)4LG
KWL)VDZ
7XF)1P8
64C)FX4
DY4)J3F
RV8)8KF
DRQ)KQ7
HND)2N7
HQS)HMW
J24)9VX
7DK)3PM
467)VBK
Q6C)TZC
SZY)9TC
BMM)4S4
HFH)2S6
K5K)4QP
N6W)RZG
TKQ)489
4R1)F22
J1G)YDF
FVW)9WD
CV7)TMC
R6K)H31
GDL)X14
H1B)NKT
XTR)PL6
BSC)SM7
MLT)S7B
22S)R7T
X8Y)4WX
NR9)NK9
FSM)J3S
WHF)VSG
ZBG)Q3D
RMY)7KM
XBX)1M8
MHY)1C2
GSS)X9G
86F)Y4W
VL6)6H9
1VH)L3B
SF8)CDG
GTK)45F
49M)NLL
FN6)PN3
KSC)R3Z
6TN)3QN
FNG)742
X45)WWH
SF5)2WH
JSJ)B1H
95L)M8F
L59)C4Y
93P)M89
K1C)6ZZ
21T)8M6
X9M)7NX
WPK)LNG
393)F6N
M4L)JXP
VKN)X88
NFK)ZVZ
LKV)C2V
SWX)TM8
V7F)8ZN
3RW)FD8
9SM)H27
TP3)1YB
6MG)D8X
8S7)345
9SV)X67
25P)JDD
BFX)TNG
36J)VBH
HN7)WVK
ZR3)3NR
M3V)GPY
52M)MFV
MZB)CJ5
MX3)XLQ
LCG)PHS
HZD)RNC
GWN)DWD
XBM)WP4
2FV)YXW
ZTP)QD2
R1G)JY6
KY4)8CG
H54)RVK
5HG)WYQ
BVC)SK1
948)P3T
SV8)5MW
V4D)YLT
69X)LNZ
BL3)Y97
DXG)WLZ
VV1)SS3
ZCD)VXB
X6D)XL2
B9H)2NB
KHK)WPK
YLT)KFT
P49)CC5
KBW)CRH
8KQ)LJ4
8JJ)VTJ
TKM)428
3SB)273
GPY)R2Z
WTX)P6W
LB1)3PR
Y1R)DJM
25P)CY5
SVB)PJM
56N)S2V
H82)8D5
CYB)GP4
HJ2)BSH
2J1)F1T
C4Y)PRM
TZC)PM5
K55)NBJ
X43)LPP
WYG)3FW
WFG)N2Y
Q37)5L9
WSF)KSH
V2H)S9J
HN2)DW9
3LL)PFH
6X3)XVM
8XZ)991
26L)WTX
Y97)5C5
XXL)79Y
NK9)RR8
L7W)83Q
8TX)45B
GMJ)1H4
ZRW)58J
36X)PRS
8B2)HTL
8JZ)L94
PRY)QTW
PL4)X8Y
89N)1RJ
DFJ)62K
5QZ)CN3
RYQ)SL6
1H4)PGZ
B1H)J88
JCC)111
V6W)GG7
BZK)97X
49J)WVY
1WM)21X
TCN)KSC
RRD)26V
VC6)WPS
Y5S)YJS
DVR)2J8
LJF)839
64D)GZC
79Y)SZY
JHT)D6J
K4K)L59
YHB)QWM
6H9)MRR
X79)M62
LW7)GGB
469)TRQ
14K)951
L9Y)K51
W7C)Y73
XD1)CYL
1XQ)HYK
Q19)PWG
F4M)KHW
SM1)J3Q
MV1)1X9
NMV)3SM
8ZD)L61
VWX)6R6
S4Z)JK4
9GT)R13
F66)89X
DLT)K6R
H4C)NW9
R3D)6Z5
MKN)M5V
H4C)22S
BFM)J2V
KQW)G8D
V61)6HG
JX4)LH3
PHS)P68
V9M)56X
1Q6)Y8V
319)KX2
M8F)881
974)KSL
LRP)XXL
M3Y)Q39
LC3)B9H
4T8)ZRW
KYB)T7L
DXJ)72V
SRP)D3M
BRN)NGD
43S)NJ1
KWJ)VGZ
DNY)F2J
DKW)YT1
6B4)6N5
GRQ)RYT
4KV)WFG
6PG)T9R
Q3T)V2P
4M5)HLG
WKZ)9ZP
XTP)JMC
PVZ)JN1
5F2)26L
76Z)R5P
FVW)NS1
MWS)PXD
Z7Z)8S7
CTH)7C2
837)48K
3SM)HYY
J2B)1TS
Y8V)BS6
YYD)3XH
4F7)BFM
6S1)95D
4KN)JV3
GSZ)HVF
9CP)GPZ
BFN)LB1
N72)741
K6R)3WF
P4J)QQW
54G)469
36T)GJ4
HXM)X6W
MR9)M29
XMQ)SP9
71F)TJR
95X)DLT
1ZX)QVK
F1L)1SY
B7X)XDB
FJW)ZCR
43X)1XH
D5H)93V
FQH)5RJ
CLW)1RG
X4Y)X9M
CRH)DWH
XWX)GWZ
36J)TKC
YFN)YJ6
15X)MBT
6T3)NDG
8SY)4R7
XMG)HR5
KSZ)WKZ
PM5)3K8
BR4)J1T
F72)GV7
317)P1W
CV7)SPK
H53)PMX
NDG)56N
N68)ZXZ
X3W)XGJ
JRJ)S7X
MKN)DBW
8CM)953
M2K)3XL
95K)95X
58S)4HL
D95)L9Y
FRH)KQW
NLL)C3D
X1H)FM1
R1M)GGQ
Y8Z)W1B
KLD)G1V
6CJ)R5X
5C5)HN7
T7M)ZXT
SZF)B5W
RPW)6TG
3VP)2W9
X2J)RXH
DWG)C9V
9FB)524
1PZ)8ZD
ZKZ)6S1
L36)ZKN
F1J)2D4
LWC)6SW
SWF)Y4V
51L)MWS
KFZ)52N
GD1)HFH
LFK)L36
KPZ)ZQ6
3NT)W48
2CD)G3D
345)JXV
2LW)SWX
9ZY)XTJ
VWR)576
STH)NHY
L4X)M4L
ZML)RN7
RDF)7PB
7FK)3KR
GVX)DCF
1WX)DD2
971)H6W
H6H)BPX
BWQ)Z4J
JPL)3SV
QWJ)TR8
376)H9P
Q3D)1YS
1N2)FQ6
2LM)53K
VSG)6DP
KNM)8B7
S7B)YXF
YHB)JHP
Y7N)CPB
M29)3FB
J37)C8B
MK3)WHL
MRG)TQ8
BFM)DLH
H4Q)9HF
D81)R7M
LRQ)ZKZ
C1B)413
BKC)PW6
GP4)6MX
C39)JSH
BW8)TL2
71Q)3YP
415)H2V
DBH)BR4
JJ7)J2H
G52)87N
YV2)JN3
7PR)Z3V
999)G8M
S7Y)JRJ
G3D)88H
SR3)NTR
JY5)FC8
MYL)B7X
K7V)HM6
FXY)L47
NNN)GYH
8JJ)Y5S
3G5)37V
FLP)4B2
839)83S
H27)CV7
X4F)RXV
S3P)WMZ
LD2)SF8
DYG)77S
LGR)2LM
7BX)G2K
KNF)9S5
JBS)R45
T6C)CGH
CNV)2BZ
356)1KP
P93)54J
VGZ)31Y
GNG)HDL
RHW)222
4T4)4T8
WVY)M5Z
KQ7)XMG
K7F)S2N
X6Z)Z9S
XYH)WFC
7BM)J2B
H9F)LKV
WDJ)HWH
MWM)83M
YM5)7J5
Z62)8NR
99Q)TVF
VDP)C2N
9VX)B5T
YS6)KNF
35R)ZH5
JN5)Y4H
MSN)XSP
776)CJ4
3FB)HXT
HZV)6HY
Q6N)HXS
MBT)FTN
3JP)YJ2
4DC)KSD
8PG)5QZ
YSP)CNV
THM)CST
3X5)BPC
ZG9)4KY
8M6)MZ5
FDF)XNB
H4X)N72
ZH5)J79
KN7)ZXV
1GP)R76
K5R)CLZ
W8G)XVF
YJQ)HB8
BWC)TB6
WFH)T6C
DPB)VYF
K8N)KWJ
C2V)HMF
H93)HF3
TR8)MFW
RJ4)F66
BS6)FVW
QFW)5B2
ML7)FB2
TGY)X9Z
PRM)ZV3
4YX)4YV
36D)N6X
XLQ)TLS
WMZ)NRF
BCM)2CV
M74)CHT
JYL)LQ4
RSN)KXR
KNK)3Y2
89X)BJK
C2H)4YQ
YYQ)VMB
164)11H
WYQ)WSF
1RG)DRH
GKD)LLT
H53)T2F
X2Q)F82
B5D)5F8
JK1)4F7
1YB)P26
B6F)552
RTD)883
ZPF)DWG
JRV)DL1
MLQ)S1Y
TX8)5QV
NDT)2MF
HFS)61F
HD8)TCN
8BL)F2X
4MK)R6Z
WVN)RMY
GGX)JCC
GQ8)J11
H4V)5FJ
3JD)VNC
7KS)9SM
NTR)YV2
4LG)JK1
3XZ)GGX
SVZ)P96
4WG)N3V
QY7)8N9
XMP)LKL
T4P)RLM
J7C)JJZ
7PC)Y23
LPP)M6T
F82)9KL
9XR)VT4
SF1)4T3
FW6)N66
QBY)D49
BCM)17Y
H1W)R6K
ZVN)7QK
BRH)7JF
LKL)39C
LV1)BJS
8PC)FN6
CHB)TBS
ZLR)3XD
8BD)BSC
NVC)9FB
Z9L)HK1
FT3)BWL
446)S8V
LM1)D8G
KH3)Q6P
J8C)WFH
YT1)SDH
CGZ)X3V
77B)V9M
2RJ)H4V
NHY)H47
89B)HM7
Z1V)58S
17Y)1Q7
J3F)891
WDG)VSZ
PJM)21T
3YL)74D
8XJ)15N
Z2X)VHH
N6R)R93
5QV)8XY
KSD)RYF
6DQ)X8F
Z2Q)MZB
ZFG)972
5LK)FT3
D25)1CF
RMQ)2HQ
85N)HDY
952)WFS
T4J)B88
2MC)JFH
BRL)D64
GJ4)65N
ZC2)QLQ
69T)3WV
W4F)WMG
74D)NCN
3YY)19K
JKG)6CJ
S68)GGZ
6N6)H2P
3XL)ZVG
S1D)14K
GMK)DW3
HJF)1D5
9DP)P9D
18K)Z2Q
248)YD2
DTK)MR3
LH8)1GZ
7ZC)RZJ
YJ2)ZVN
JN1)1FX
3WV)289
53D)GJX
883)FXW
79K)ZXD
DLH)9X5
BRQ)KHK
2XW)R65
RGD)GCY
RNC)TR9
HYV)54C
SJF)BBD
T81)F2T
GZ2)KBQ
G2K)48L
PL6)B5D
R76)Z4Z
QVK)TDX
F6N)M6X
8XQ)3JP
HXD)WNB
CLZ)37R
K6R)SY1
X9G)8CM
2W9)W4X
ZXV)JC5
HKY)1Q4
KV1)QZC
LMT)CLW
Y4M)P57
1YS)SJF
NGV)N1R
VLF)RGD
FJ5)8WN
PWG)V4K
XDC)KY2
3DJ)RV8
1RJ)2GN
WXT)MP2
R89)JLR
GGB)RDG
Z6L)GQX
ZJQ)TLG
3WF)FQH
5YP)5Z3
C1B)CCD
SBW)BQB
41C)W4H
1P5)YYP
R5X)36J
DZL)KNW
P57)CN4
C85)78L
6YB)S7R
CYB)LNN
881)Z5X
642)B5K
X9J)SQT
BJK)M39
BMW)SHT
2NS)VKN
1C2)JHT
H46)ZGD
JY6)RF8
V1D)82Y
Z4Z)FW6
CRP)JRG
1VX)77V
M2F)MHH
B7X)JJV
H29)7JR
Z4C)N13
HN2)PRV
FTN)5FY
8HS)Z4M
JTP)GLS
JST)8XZ
4GX)T2P
1GZ)V8W
5MW)RT4
9G2)QPQ
X6C)NGV
GP8)8SY
J67)ZBL
R45)BWC
DDF)S37
31R)PHR
V4K)2L6
J69)SYP
DVF)R29
DLS)1BQ
72W)JKH
JPV)FL9
TSK)69T
93V)T9M
CST)WPW
37Y)BJ8
JR2)V4Z
B7C)X1V
WN7)GCD
K65)TM5
HFS)KYB
1XR)TX8
7L2)NXY
57Z)M6W
WMG)5HG
F6S)3YF
FMB)N6Q
HS4)QNV
XN6)X2C
56X)Z5F
NJ1)3M8
65K)S2S
MSJ)Z3P
3RW)YJQ
YRB)L4G
5DZ)5YP
TB6)TGV
PDM)H9F
MTR)B36
GGH)2LS
4S6)4KV
SVB)MV1
JQN)18K
SRN)ZFK
ZFX)HXD
YNR)GCL
8QM)GDK
17G)B9Y
JKZ)19N
MJD)5BH
NSR)24N
T48)CF2
Q3R)3TZ
741)T7M
P2C)G9Q
V8G)17G
GCC)54L
53K)TC8
ZGD)F7V
J5Z)Z7X
4YV)HZV
GPZ)69X
RYT)RTK
Z6T)7ZC
FMT)ZVJ
56X)7KS
M89)YDR
F6Q)V8G
Y4V)MY7
1Q7)17N
YV7)HQS
YLQ)GJ2
5WT)VQB
YN7)DR2
MPX)JBC
LFL)DPB
TNG)5Q1
LW7)HC8
HBR)Q6N
9K2)DNB
GXN)MHW
SGZ)1HF
WFS)N4R
3GN)2K4
5Y4)1MH
M9W)7PR
WCK)DMQ
COM)TKH
6XY)LTM
WQF)1S2
Z6N)3BD
CF2)LFL
GDX)ZQ4
PGZ)1VH
X5D)6CP
TDX)MKV
3XX)BHR
SPL)DXS
GM5)TZR
M8W)DBH
PFH)KGJ
W4H)MKN
SPK)LRQ
V4P)63V
5LQ)WDG
L2G)49J
HB2)6Q9
YV4)NTM
H47)9MW
ZB8)Y8J
C3D)HTQ
9HF)9K2
XDG)GDX
FMS)239
JJP)PKV
6C1)BL3
FNX)JX4
SN2)237
TSD)PNN
RY1)JL3
TX5)B2R
BS5)HJK
TBS)JNC
1BQ)PR5
NRS)FX1
5GX)BKC
8Y8)FRH
GP1)KFR
H1W)ZLJ
FX1)WT6
HJK)WFT
7Z4)GT9
FD8)RGG
8VZ)5PJ
1LW)PTY
PTT)15X
QVZ)6LR
Q9V)WMP
BLW)4DX
554)35D
YML)DND
997)CTW
L2L)6WB
PR9)K5K
6TY)5Y4
2RQ)DVF
5PL)NK7
3WB)KJ7
PXM)HN2
NBJ)FMB
BGN)BRP
BTH)C2B
9X5)MLT
XGJ)KGD
TDC)SBW
56Q)K7F
HF3)Z2X
RP9)952
PKV)K4K
222)95K
LX9)4WG
RYF)HB2
5CL)C4P
J2H)6PG
CXP)5GB
38R)L7N
NJ1)YDZ
LBC)42B
6WB)NCK
524)YOU
D8X)YNZ
KY2)BRH
W5X)DZX
SP9)G1J
JKT)LGJ
J2V)PJT
6SS)R9G
8MF)2L8
X4J)8JJ
T1P)DLS
NWC)76R
YXW)RMQ
Y64)9NF
XB5)52M
JKP)YC1
FZ2)ZCD
Q3S)CWT
YCS)QDR
S3M)792
Q7K)N5M
952)MYL
GPR)F37
Y7G)TFK
V7H)2G3
CHW)BVC
FSM)TRY
RS7)BFX
KF6)3RW
TGV)6BJ
3TP)CXP
DXS)BW8
8QM)NT3
R4Z)X43
7X3)7N7
JJZ)3WB
GWZ)K7Z
XQF)R1M
2L8)4YX
891)F1D
S73)KS9
289)3TB
XJF)PDZ
C29)K7N
YH5)8F3
9NF)8LD
YX7)1NW
ZLJ)ZGS
DWS)CY2
Z4P)XBM
HKY)K55
P6W)BWQ
P1H)L64
54T)25P
W38)6KP
CNV)9S2
7FS)75T
9SV)PQQ
H46)VL3
3FW)W91
JBW)T99
J89)MLR
CJC)4B6
NYK)189
R2K)3CT
S54)BHJ
98D)HRL
F1T)GRQ
T9M)NZJ
5B2)FNX
PQJ)D89
WG3)2W2
ZS9)WW8
FSG)5SS
DW4)ZFG
78L)49Z
NGQ)2TJ
M6X)GDP
KXR)95L
1WQ)FNT
BRP)L4X
J3F)5C4
2NB)JJD
SZL)5PT
FNB)DN9
LNZ)ZBG
Z4J)NQV
D6J)H54
1CF)SZF
QQF)1N2
FFS)VF9
NK7)KRM
6HY)TDQ
C2Q)16T
JTK)ZLR
1KD)N3R
2XH)JKP
BJ8)QHR
G9Y)5F2
4R7)HGM
JGH)XS7
72G)LLM
QLQ)Q1Y
TJL)8JW
N8F)8SX
JY8)HZD
3W9)JPV
WK4)HBD
8X9)6XH
YYG)WJQ
HZL)NQZ
BLY)JJG
6CH)CR4
GQ6)248
DWH)5LK
LQM)Z7Q
SN2)4DC
BF7)BTH
Z9S)NG8
F5D)HK4
2S6)5NW
LTM)757
FC8)89N
SBJ)4T4
XLM)XQR
S29)TDC
1YK)RL3
6J2)7NB
SK1)7CS
GBD)H77
9KL)HJF
LJ4)VST
S9W)4KN
99C)Z6N
L58)M2K
5JS)LR8
WR5)9XR
V6W)WK4
9S7)FRC
TM8)C39
F4Q)Y86
BN1)MTR
BGG)GP8
GJN)MV8
TLG)XYH
83S)CHW
Z1H)GX4
3TB)HHX
J3Q)JQL
5Q1)75N
W91)57T
DVJ)HBR
B6F)M9M
WMP)5XN
WXQ)B17
83M)XMH
8N9)SAN
LVG)8ZV
L2J)7SB
FNT)KM7
BPC)B9T
1TQ)K27
JZR)RJ4
L9S)H93
189)36D
TZG)2Z4
5LZ)HXM
SJD)Q3S
WJQ)D81
GP8)GZ2
1TP)ZNV
X2J)837
DJM)KDJ
7GP)NYK
TQ8)446
HZL)4L8
29G)3VP
4LZ)XTK
KFX)6N6
HPM)WWQ
X1V)KVV
Y64)V4C
5GN)54T
SJ1)QS3
DM4)83W
KDT)ZB8
DL7)DKC
TML)SPL
LC2)K1W
MHW)5Z7
MXT)RQN
9KL)K9L
M3T)YRM
KFR)Q49
1DJ)SN2
F82)2J1
PWN)5PX
YT1)V7F
T6S)T1F
B8L)WB2
Q79)LKF
853)RTD
KBQ)356
HTL)54G
43T)53D
B5W)PH9
7KQ)8TX
T2Z)1WQ
8HY)29M
552)M74
STR)6HX
FRV)HMM
45F)J7C
4Y9)HFS
GNN)WJ6
HXT)JQ8
PNN)51L
PHR)RK5
MM8)H1B
N66)G85
C4P)W7Z
991)FSM
7QK)SLP
GDP)71Q
5MC)MRG
F2X)HY1
B9B)CWM
SVZ)HN8
XDB)4P8
BS3)VFP
VXM)KCL
9G6)831
9Z8)FNJ
GX4)C2Q
WFB)MZ9
63V)MX3
V8W)82Z
RTK)319
427)WY1
4T3)VVN
T2P)4LC
CR4)FQS
K4L)DTK
HLP)WCK
4YQ)H9N
RK5)QFW
GT9)SRN
YXF)FXY
V74)L3W
MY7)2RQ
JLR)JNS
9S5)LPH
H54)J37
8XR)BLY
QMC)T48
4TY)1QG
Z4J)H82
BZC)LKD
4CP)86F
Z24)L58
1FN)X15
5FJ)QWJ
K27)2CD
3Z9)3W9
L6V)J1J
51V)HJ2
WD5)Q99
49Z)G6N
Y4V)DDF
MFV)3GH
B1T)9CM
X9Z)BG5
2M6)1XQ
2J8)3G5
VMB)13Z
51S)BMW
1MH)LFK
VBK)3D4
SDM)8XR
7NX)S2K
52L)4NL
LRS)664
JDD)43S
JJV)H6X
62K)7L2
WR1)L3D
LN4)WXQ
S52)C85
F22)9SV
LH3)8B2
YBD)8MY
TGM)N6H
ZVJ)MSN
S2S)5HV
2MF)GP1
9ZP)3ZK
1LW)H44
QTW)T9P
GHZ)YV7
W7Z)M3Y
5FK)NWC
97X)36T
G7X)K5R
GLP)XQF
WQH)ZM7
8YP)KF6
WNB)WG1
W21)1TQ
VBH)XM4
CY5)3N6
G1V)K1G
L2X)L9S
2CV)3LL
BKC)LC8
R5P)JDL
JL3)T5B
HDY)FRM
XL2)F29
8Y8)N86
C8B)FDF
L3W)Z9L
WJ6)6FW
5HV)157
DW9)1WX
C2B)JR2
6HK)7GP
N86)971
GZ6)KHJ
V4Z)376
WT6)F4Q
H97)FP5
M4L)MCT
D8G)BCQ
XPG)NP5
8CG)GBD
6SD)6X3
54L)1TP
N1W)MJD
ZXT)VXM
QH7)JN5
S7H)4M5
QSC)44B
19K)QLJ
951)25C
PJZ)W21
X8F)X4F
CZW)SV8
ZYJ)F5C
XNR)KPH
658)47Q
D66)3GD
ZGK)D65
4ZT)YBT
3NR)K3P
WMD)HRP
VGN)554
2GN)WH3
8SX)DXJ
Z4M)MR9
R1V)VDY
1D1)CRZ
CC5)MH1
2NS)PXH
SLP)1FN
PTB)LYC
V4D)Z5M
Z2N)X77
DR4)7KQ
646)98D
9PN)F21
PB8)728
WXT)4S9
3YP)TGM
6PG)776
9KY)T7C
5SS)LV1
8HR)53Z
972)FZ2
XJ8)9PN
6PB)Q35
ZCR)42N
NNP)YPG
SL6)XL4
1CG)YZJ
QKG)5GX
L94)HD8
ZVH)GVJ
R93)3YL
4GC)2XH
FNJ)ZL5
2LR)YBD
YDW)HMN
S8V)YRB
YV2)HS4
6B6)6WZ
SVG)LB5
DMQ)VWX
72Y)997
MHY)3YY
JX9)XHT
MTV)DSB
413)6SD
DSB)25Q
9HF)BRG
B5W)P93
9TB)XTP
JN3)6W2
TFK)MKW
T49)4NY
742)MSJ
8F6)ZKW
TRQ)3JD
F2T)R8H
LQ4)GMJ
B9T)H46
T2F)ZC2
VC6)TJF
YDZ)R48
RGG)974
DTK)H4C
DTF)QCP
7KM)Z4C
GTS)MLJ
296)424
664)H86
2YP)ZYJ
V18)VC6
7CS)SQH
DZS)3X8
QYT)8HS
62Y)SQW
D8X)YXX
N2X)D3B
P84)6J2
JPH)DZL
WM9)KWM
TM5)GM5
W4X)YYR
TNG)LRP
1KP)ZQX
MZ9)72Y
WJZ)MPF
NP5)SQ3
D66)5QS
H7H)ZCB
16T)V74
X15)1WS
8NR)Y7N
237)DYP
N4Y)CGZ
Z8K)BYX
8KF)N6W
RF8)NMV
WFC)7XF
449)DDB
D49)X1H
TM8)78Q
G6N)73R
HGM)GD7
F21)Y1R
TRC)5HH
N14)S73
ZXT)BS5
NG8)4L5
8ZN)Q79
4HJ)Q3T
837)NDT
1R7)R2K
77S)6YB
S7R)1XY
2VT)KNJ
WQ4)64D
M5Z)PVZ
RQN)8V9
VVN)K2K
V2B)N3K
B17)7BX
1W5)LMT
1YW)X2J
XJC)XJF
P4W)4J1
PRS)Q4P
BMM)QB5
L7N)H29
4W5)GKS
8WN)KH8
N4R)39M
4NY)14W
19Q)ZG9
W6W)J8C
PWZ)4RW
8F3)JBW
BC8)F4N
QG8)VDP
YG1)GBY
KRM)WJZ
4HL)2TH
W1V)FMT
1BL)NC2
RTN)R6C
QLJ)PLT
SQH)93Y
KM7)9G2
5Z3)JY8
WB2)YSP
3S1)4W5
5BH)SXV
28Q)5Q7
PDZ)XD1
D79)WHF
6BJ)DQT
5F8)C29
46R)XNR
NC2)2Y8
T5B)863
TJF)PDM
L47)5QW
F59)JX9
RK6)QG8
GD7)RWP
863)7DK
97R)LJF
6N7)X32
WLZ)XDM
RXH)79K
WG1)NQW
BNR)1P5
ZXV)QQF
ZJX)GSZ
X2C)L5L
NVC)L2G
T1F)FK2
GGZ)KH3
TZC)R9K
157)FRV
3CX)Z1J
NS1)BGG
MFW)36X
DW3)C53
88H)LP4
FX4)F4M
676)7BB
9TR)Q3H
P5H)Z1H
LB1)XBR
SWS)FLP
4S4)QMC
KNW)5LZ
3PR)TVL
JYK)46F
ZM7)Z6T
Q99)427
5R1)MYP
3TZ)YHB
QPD)L6V
HB8)K7P
2W2)ZFX
BS3)GWH
953)S2C
1BC)WKC
S7X)9PL
1RQ)KLD
1XY)JRV
D37)SF5
PXD)P2C
4L4)CVV
MYP)2VZ
WPW)SFQ
N6H)8D7
8B7)9RM
297)Q93
LNG)R64
BXB)NSR
DKC)MTV
6C1)81V
75N)21C
XY7)THS
BRG)YY2
F37)RMV
831)LYP
M1P)GZ6
ZXD)NR9
6G1)35R
H2V)51V
Q9F)RRD
FXW)3XX
ZV3)CDP
JC5)JGH
Y73)KFX
V6G)1W5
7BB)DR7
RN7)56M
3GV)8X9
HMM)41C
JK4)V1D
MFV)2J4
QQW)H62
N1R)CCC
B5T)3GV
G8D)8QM
JNB)Z75
8D7)ST5
JXX)C1B
G5Y)Y92
G46)DW4
3CQ)R9L
FR9)Q83
N6Q)JR4
ZG2)S4Z
JDC)NCF
ZLX)2XW
JJD)QLN
YY2)FJ5
Z3P)W7C
LSB)N68
64D)8BL
PR9)J67
N6X)M2F
SQ3)XZ7
MKW)KVM
L61)PL4
R2Z)2BF
HGM)KQK
222)RJQ
4LC)PY4
54C)N14
MLR)Z7Z
BBD)W1V
JK1)32M
SY1)3S1
65N)3TK
1X9)4HQ
6F3)H6H
489)GFB
Y86)52L
HN7)R1G
48K)5MC
4P3)Z6L
CHT)8R9
3M8)HKP
RK6)PP4
X77)V4D
YDR)LCG
DZP)3CY
75T)TKM
ZFK)5LQ
6R6)8NV
TVL)RHW
HMN)BNR
PG2)VN1
FVQ)SQ5
1HF)W5X
WVY)TGX
VYF)2N1
BJS)LTJ
72V)GCC
8NV)BS3
ZL5)P1H
3KR)69D
CZS)8WW
4N2)72G
KK2)JXX
5Q7)KPZ
4QP)HYV
1SY)V7H
CN4)JTP
9TC)SVG
K7P)T6S
QFQ)999
NGN)QKG
BHR)DR4
TGX)XPG
DY3)YG1
M5Z)PHZ
KBQ)HVY
9D2)N5J
GMF)4LZ
1P8)BFN
GBY)KY4
49M)LWB
FNZ)FFS
JL3)V2H
LB5)7FK
PM5)1BL
PHZ)LH8
NCF)YNR
HSK)W6W
5RJ)C95
RPK)ZRK
Y34)54N
5QW)TZ5
KGJ)43X
P2V)Q9T
NQZ)L7W
WP4)S29
J3S)C9G
5C2)TX5
3PM)PK2
3GD)393
CCD)3Z9
QKQ)PB8
FCN)LRS
FQ4)M3T
45B)B1T
NPJ)MK3
KGD)JJP
F5Y)JKZ
C6D)HSK
TR9)7SS
2TX)H73
NFV)X5D
C2V)43T
M6T)KPS
PK2)1CG
TP1)N4Y
1D5)D9Z
MTR)97R
3TK)X3W
R7T)3VC
PHP)1LV
5GB)2H5
YC1)24X
S5H)W79
FQS)JVF
DML)6F3
Z75)LXP
DMJ)29G
54N)GSS
RWP)D79
VBV)XWX
VST)CMS
GZ2)676
N72)FP3
792)ZJX
H73)J17
M8N)WQ4
H6X)L5G
3VC)LBC
YBT)YR2
LYC)4GX
3VP)17F
F5Y)9ZY
8LD)BCM
7JR)X45
MV8)FY7
JN6)31R
MZ5)CVK
239)S7Y
DJ3)S7H
RVK)6HK
G85)WR5
LKF)TZG
SQ5)NP4
HN8)H53
CTW)MCJ
8ZV)6YF
2RQ)SR3
MRR)Z4P
WQ3)TYW
6SW)L2J
HFC)CTH
N5M)1TK
757)RDF
R5Z)MHY
NW9)V3P
K3P)PWN
GD7)GDL
B2J)FN2
BRJ)GK8
S62)3NT
9BH)38R
KQK)WXW
2LS)T8V
4J1)5WT
7J5)H3D
W1B)F72
F4N)NFK
QCP)4HJ
DWH)V5B
87N)XY7
F13)LWC
7VH)67W
PMG)DY4
JMC)WQ3
6HY)PTT
YJ8)DML
9CM)DM1
54J)DNJ
1Q6)8ST
CKW)XS3
ZKW)JPL
111)YFN
H6W)R5Z
THS)X4J
DTM)PWZ
ZH5)8PG
JR4)Z24
NCN)8HF
3BD)B8L
76R)LN4
N3K)97M
JJG)N1H
5JW)P48
YJS)XMP
4RW)T2Z
D65)DNY
KWM)ZGK
5FY)9BK
Y8J)7DR
5PJ)1YW
24L)PTB
XTR)PJZ
LLM)QSC
R6Z)V6W
H62)PQJ
HT7)V18
6CP)S3M
WXW)N6J
GJX)F5Y
Q35)QY7
3K8)F59
8SX)SWS
B2R)6N7
R8H)CRP
CGH)HFC
NWC)QKQ
P9D)BLW
NK3)YLD
CDP)2M4
Q39)QB9
F2J)X7D
J79)QHD
VXM)948
X7D)GLP
NP4)Q37
69H)K1C
FF1)65K
P7X)YDW
HTK)B6F
273)CTT
D25)164
QGY)DXG
G46)BMM
QPQ)SZL
HM7)G7X
VMJ)J24
5QS)RD6
KVV)4CP
6W2)8KQ
1JP)PR9
4B2)SF1
FX4)NNP
2N7)ZRC
JQ8)N1W
LKD)83V
345)CJC
HVF)QYT
Y4H)7VH
5LR)4MJ
S2C)FSG
V5B)BBN
5X5)SJ1
MKC)NPJ
BWL)F39
VDZ)Z27
7GP)YB3
8R9)R3N
SQW)GNG
3X8)V2B
D89)SM1
Z4P)RSN
YB3)5LR
V4C)1JP
FGH)FF1
GKS)R69
M5V)H4X
3CY)KXM
G4S)D5H
12P)1YK
3Y2)R1V
KTZ)DQW
KD3)L2L
KSL)F13
R3Z)JKT
G9Q)1D1
2J4)5DZ
X3V)MM8
Z7Y)1BC
G1J)G4S
W4X)LFX
YJ6)JMV
FP5)KN7
PCQ)8HR
FN2)W8G
31P)WFB
YXX)CYB
NXY)77B
NCK)Z8K
VPX)3TG
CN3)JY5
HXS)WQF
FK3)DZS
WFT)9DP
XZ5)F1L
639)T81
R26)PCQ
2VZ)YYD
4S9)1PZ
HVY)V4P
K55)K8N
2Y8)WMD
69T)24L
MHH)SRP
WPS)YWV
9PL)NHB
D3B)KDT
SHT)GJN
42N)6MG
K9F)YDT
N2R)FVQ
F3Q)296
YML)8XQ
6YF)B9B
R13)Y64
DNJ)DKW
H44)ZTP
1Q4)5JW
RLM)BRJ
LMJ)8HY
CL4)LF1
6GW)TMM
VTP)JWQ
TQL)G52
3QN)VWR
BFN)VPX
T39)TSK
Z1J)S3R
F7V)XBX
VNC)LW7
WM8)788
HBD)K9F
JQL)JGJ
3SV)WVN
DM1)297
VHQ)467
PVJ)12P
3GH)2M6
6MG)KD3
1NW)4GC
VTJ)FKC
Q8H)P86
5QW)BXB
ML7)V61
94V)NK3
XM4)TML
V2P)5Y3
CR6)JKG
7LG)S9W
8TX)V6G
2JY)ZG2
DVR)57Z
VN1)Z2R
ZC3)N2C
SB6)RPW
58W)1ZX
VFP)X6C
JQN)ZC3
53Z)LQM
KWL)TP1
HKP)4BW
S9T)Q19
K2K)WD5
WLM)YV4
SFQ)4R1
6KP)CTQ
V3P)XDC
CXM)MKC
31Y)Z62
XHT)L7R
FK2)S52
LVY)HFP
RJQ)KV1
9S2)2LR
NZ8)DVR
JKH)PG2
ZQX)3TP
81V)9CP
42B)WDJ
7PB)S68
39C)6C1
RR8)KSZ
XL4)RTN
3XH)RYQ
78Q)TP3
GCD)5YQ
R29)LVG
Q3H)646
TMM)ZLX
4B2)WDB
6N5)449
3XL)NFV
CDL)6JS
TMC)B7C
R1W)ZWC
LH3)XJC
CHH)DFJ
1FN)MLQ
LMT)658
HK8)BN1
73R)1GP
ZQ6)6B4
Z5X)D37
YPG)GTK
8SM)VL6
W5C)C6D
4BW)YS6
DYP)2TX
R9K)BRN
KS9)L9J
XTJ)B25
Y23)CHB
NHB)LG4
L5L)7Z4
DRK)9SL
ST5)NVC
2WH)DTM
1LV)SDM
788)256
TW7)6TN
6FW)3CX
BG9)4Y9
67W)JJ7
2D4)FR9
Z8K)F1J
LTJ)31P
R94)YJ8
5PT)MPX
9SL)LGR
FKZ)9G6
DR7)SGZ
SM7)9KY
TKH)8MF
VXB)4N2
XQR)W38
21F)HK8
Y3H)XLM
DBW)M8W
11H)853
1WS)66W
DW4)KNK
NQV)SVB
6ZZ)8YP
ZWC)5PL
PP4)3CQ
T8V)THM
J1J)HMK
CPB)Y7G
GYH)9BH
WPK)FMS
95D)FJW
HM7)CJJ
ZGS)LBV
HMK)BZC
2BF)DWS
LWC)85N
L3B)M1P
7C2)WG3
3ZK)7BM
GDK)8XJ
LGJ)4R6
DL1)JSJ
44B)6T9
KFT)CXM
Q4P)STR
LBC)6ZD
GDK)STH
6MX)F2P
Y92)21F
6ZD)YYQ
HYK)58W
3YF)KNM
X9G)8K2
QWN)JQN
17F)KTZ
CJ4)62Y
KQW)GMF
15N)S9T
G1V)GMK
M62)X6J
8V9)SVZ
WW8)DJ9
FP3)28Q
PMX)F3Q
N3G)56Q
46F)ZN3
D3M)S3P
D64)LVY
72Y)ZHM
LPH)WLM
HY1)HZL
L3D)QPD
Q9T)X6Z
6HG)3DJ
KBP)9TR
25C)9Z8
ZR9)RYK
TJR)5C2
56M)X4Y
TL2)5CL
939)ZVH
595)DTF
Z27)D25
54T)MWM
ZBL)W4F
6JS)H7H
YWV)QWN
5D9)S5H
P96)KZ1
TDQ)8JZ
NQW)VHQ
K9L)DMJ
H6W)8F6
2TJ)8NJ
MCJ)T1P
M94)JNB
5ZJ)9BG
KCL)RS7
X6J)ZGQ
PQQ)JN6
S2K)5FK
K7N)X2Q
HTQ)GW4
LTJ)RPK
DD2)8J5
7NX)Z2N
6LR)R3D
YR2)7Y7
JBS)CZW
ZRK)XJ8
4L5)3XF
GJ2)FNZ
XTP)YCS
HRP)P5H
BRJ)J89
RD6)ZR3
YNZ)N8F
2N1)XGH
JDL)DLD
YLD)94B
ZNV)1Q6
6TG)CR6
GMW)KWL
TZR)698
RDG)VGN
F1D)5X5
3CT)6CH`;
}